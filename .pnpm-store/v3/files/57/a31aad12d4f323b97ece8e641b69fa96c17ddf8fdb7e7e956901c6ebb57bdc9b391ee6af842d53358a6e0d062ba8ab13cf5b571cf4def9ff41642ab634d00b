"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.container = void 0;
const schematics_1 = require("@angular-devkit/schematics");
const change_1 = require("@schematics/angular/utility/change");
const find_module_1 = require("@schematics/angular/utility/find-module");
const parse_name_1 = require("@schematics/angular/utility/parse-name");
const validation_1 = require("@schematics/angular/utility/validation");
const workspace_1 = require("@schematics/angular/utility/workspace");
const core_1 = require("@angular-devkit/core");
const statements_adder_1 = require("../shared/statements-adder");
function addInserts(options) {
    return (host, context) => {
        if (!options.module) {
            return host;
        }
        const classifiedName = core_1.strings.classify(options.name);
        const dasherizedName = core_1.strings.dasherize(options.name);
        const containerPath = `/${options.path}/` +
            core_1.strings.dasherize(options.name) + '/' +
            core_1.strings.dasherize(options.name) + '.component';
        // Add to module
        const modulePath = options.module;
        const moduleText = (0, statements_adder_1.getSourceText)(host, modulePath);
        const moduleToContainerPath = (0, find_module_1.buildRelativePath)(modulePath, containerPath);
        const effectsPath = `/${options.path}/` +
            core_1.strings.dasherize(options.name) + '/+state/' +
            core_1.strings.dasherize(options.name) + '.effects';
        const moduleToEffectsPath = (0, find_module_1.buildRelativePath)(modulePath, effectsPath);
        let insertChangesInModule = (0, statements_adder_1.simpleInsert)(moduleText, modulePath, [
            '// Containers',
            'EffectsModule.forFeature([',
            '// Containers'
        ], [
            `import { ${classifiedName}Component } from '${moduleToContainerPath}';\nimport { ${classifiedName}Effects } from '${moduleToEffectsPath}';`,
            `      ${classifiedName}Effects,`,
            `    ${classifiedName}Component,`
        ]);
        // Add routing module changes
        context.logger.info(modulePath);
        const moduleDir = (0, core_1.normalize)(modulePath).split('/').slice(0, -1).join('/');
        const moduleFileName = (0, core_1.normalize)(modulePath).split('/').pop() || '';
        const moduleName = moduleFileName.split('.')[0];
        const moduleRoutingPath = `${moduleDir}/${moduleName}-routing.module.ts`;
        context.logger.info(moduleRoutingPath);
        const moduleRoutingText = (0, statements_adder_1.getSourceText)(host, moduleRoutingPath);
        const moduleRoutingToContainerPath = (0, find_module_1.buildRelativePath)(moduleRoutingPath, containerPath);
        context.logger.info("moduleRoutingPath: " + moduleRoutingPath);
        let insertChangesInRoutingModule = (0, statements_adder_1.simpleInsert)(moduleRoutingText, moduleRoutingPath, [
            '// Containers',
            'const routes: Routes = ['
        ], [
            `import { ${classifiedName}Component } from '${moduleRoutingToContainerPath}';`,
            `  { path: '${dasherizedName}', component: ${classifiedName}Component, canActivate: [AuthGuard] },`
        ]);
        context.logger.info(`about to start committing`);
        // For each of the files and corresponding set of changes, commit to the tree
        [
            [modulePath, insertChangesInModule],
            [moduleRoutingPath, insertChangesInRoutingModule],
        ].map(([filePath, insertChanges]) => {
            const declarationRecorder = host.beginUpdate(filePath);
            for (const change of insertChanges) {
                if (change instanceof change_1.InsertChange) {
                    declarationRecorder.insertLeft(change.pos, change.toAdd);
                }
            }
            host.commitUpdate(declarationRecorder);
        });
        return host;
    };
}
function container(options) {
    return (tree, context) => __awaiter(this, void 0, void 0, function* () {
        // Make sure the command is executed in the directory where the container should be generated
        if (!options.inDirectory) {
            context.logger.info("Please navigate to the directory where you want to generate the container.");
            return (0, schematics_1.noop)();
        }
        const workspace = yield (0, workspace_1.getWorkspace)(tree);
        const project = workspace.projects.get(options.project);
        if (!project) {
            throw new schematics_1.SchematicsException(`Project "${options.project}" does not exist.`);
        }
        context.logger.info(`options.path: ${options.path}`);
        if (options.path === undefined) {
            options.path = (0, workspace_1.buildDefaultPath)(project);
        }
        context.logger.info(`options.path: ${options.path}`);
        options.module = (0, find_module_1.findModuleFromOptions)(tree, options);
        context.logger.info(`options.module: ${options.module}`);
        const parsedPath = (0, parse_name_1.parseName)(options.path, options.name);
        options.name = parsedPath.name;
        options.path = parsedPath.path;
        (0, validation_1.validateHtmlSelector)(options.selector);
        // Define relative path parameters
        const containerPath = `/${options.path}/` +
            core_1.strings.dasherize(options.name) + '/' +
            core_1.strings.dasherize(options.name) + '.component';
        const moduleDir = (0, core_1.normalize)(options.module).split('/').slice(0, -1).join('/');
        context.logger.info(`moduleDir: ${moduleDir}`);
        const moduleToContainerPath = (0, find_module_1.buildRelativePath)(options.module, containerPath);
        context.logger.info(`moduleToContainer: ${moduleToContainerPath}`);
        // This is just a hacky way of figuring how many ../ we need to get to core
        const containerToCorePath = moduleToContainerPath.split('/')
            .slice(0, -1).map(() => '..').join('/') + '/core';
        const templateSource = (0, schematics_1.apply)((0, schematics_1.url)('./files'), [
            (0, schematics_1.applyTemplates)(Object.assign(Object.assign(Object.assign({}, core_1.strings), options), { containerToCorePath })),
            (0, schematics_1.move)(parsedPath.path),
        ]);
        return (0, schematics_1.chain)([
            addInserts(options),
            (0, schematics_1.mergeWith)(templateSource)
        ]);
    });
}
exports.container = container;
//# sourceMappingURL=index.js.map