"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.init = void 0;
const schematics_1 = require("@angular-devkit/schematics");
//import { InsertChange } from '@schematics/angular/utility/change';
//import { buildRelativePath, findModuleFromOptions } from '@schematics/angular/utility/find-module';
//import { parseName } from '@schematics/angular/utility/parse-name';
//import { validateHtmlSelector } from '@schematics/angular/utility/validation';
const workspace_1 = require("@schematics/angular/utility/workspace");
const core_1 = require("@angular-devkit/core");
//import { getSourceText, simpleInsert } from '../shared/statements-adder';
function init(options) {
    return (tree, context) => __awaiter(this, void 0, void 0, function* () {
        // Warn them that this should only be used on a new repo and ask if they want to proceed
        if (!options.proceed) {
            context.logger.info("Cancelling generation request. This schematic should only be used to generate initial files on FRESH repos created from ng new.");
            return (0, schematics_1.noop)();
        }
        context.logger.info(`options.project: ${options.project}`);
        const workspace = yield (0, workspace_1.getWorkspace)(tree);
        const project = workspace.projects.get(options.project);
        if (!project) {
            throw new schematics_1.SchematicsException(`Project "${options.project}" does not exist.`);
        }
        options.path = (0, workspace_1.buildDefaultPath)(project);
        context.logger.info(`options.path: ${options.path}`);
        //const parsedPath = parseName(options.path as string, options.name);
        //options.name = parsedPath.name;
        //options.path = parsedPath.path;
        const templateSource = (0, schematics_1.apply)((0, schematics_1.url)('./files'), [
            (0, schematics_1.applyTemplates)(Object.assign(Object.assign({}, core_1.strings), options)),
            //move(parsedPath.path),
        ]);
        return (0, schematics_1.chain)([
            (0, schematics_1.mergeWith)(templateSource, schematics_1.MergeStrategy.Overwrite)
        ]);
    });
}
exports.init = init;
//# sourceMappingURL=index.js.map